name: Deploy Java Apps to Oracle Linux on release push
on:
  push:
    branches:
      - release
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'  # Enable Maven cache for faster builds
        
    # ---------- Build Notification ----------
    - name: Build Notification
      working-directory: ./Notification
      run: mvn clean package -DskipTests
      
    # ---------- Upload Notification JAR ----------
    - name: Upload Notification JAR to Oracle Linux
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: opc
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "Notification/target/*.jar"
        target: "~/notification"
        strip_components: 2  # Remove Notification/target/ prefix
        
    # ---------- Restart Notification Service ----------
    - name: Restart Notification Java App
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: opc
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd ~/notification
          echo "Stopping old Notification service..."
          pgrep -f "java -jar .*$(pwd)" | while read pid; do
            echo "Killing process $pid"
            kill -15 "$pid" || kill -9 "$pid"
            sleep 2
          done
    
          echo "Locating latest Notification JAR..."
          latest_jar=$(ls -t *.jar | head -n 1)
          if [ -z "$latest_jar" ]; then
            echo "Error: No JAR file found"
            exit 1
          fi
          echo "Found: $latest_jar"
    
          # Create symlink with absolute path
          ln -sf "$(pwd)/$latest_jar" "$(pwd)/app.jar"
    
          echo "Starting Notification service with custom config..."
          nohup java -jar "$(pwd)/app.jar" --spring.profiles.active=dispatcher > app.log 2>&1 &
          sleep 5
    
          # Check if application started successfully
          if pgrep -f "java -jar.*$(pwd)/app.jar"; then
            echo "Notification service started successfully"
          else
            echo "Failed to start Notification service"
            tail -n 50 app.log
            exit 1
          fi

    
          echo "Notification deployed. Logs at $(pwd)/app.log"
    # ---------- Build blog_backend ----------
    - name: Build blog_backend
      working-directory: ./blog_backend
      run: mvn clean package -DskipTests
      
    # ---------- Upload blog_backend JAR ----------
    - name: Upload blog_backend JAR to Oracle Linux
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: opc
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "blog_backend/target/*.jar"
        target: "~/blog_backend"
        strip_components: 2  # Remove blog_backend/target/ prefix
        
    # ---------- Restart blog_backend Service ----------
    - name: Restart blog_backend Java App
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: opc
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd ~/blog_backend
          echo "Stopping old blog_backend service..."
          pgrep -f "java -jar .*$(pwd)" | while read pid; do
            echo "Killing process $pid"
            kill -15 "$pid" || kill -9 "$pid"
            sleep 2
          done
          
          echo "Locating latest blog_backend JAR..."
          latest_jar=$(ls -t *.jar | head -n 1)
          if [ -z "$latest_jar" ]; then
            echo "Error: No JAR file found"
            exit 1
          fi
          echo "Found: $latest_jar"
          
          # Create symlink with absolute path
          ln -sf "$(pwd)/$latest_jar" "$(pwd)/app.jar"
          echo "Starting blog_backend service..."
          nohup java -jar "$(pwd)/app.jar" > app.log 2>&1 &
          sleep 5
          # Check if application started successfully
          if pgrep -f "java -jar.*$(pwd)/app.jar"; then
            echo "blog_backend service started successfully"
          else
            echo "Failed to start blog_backend service"
            tail -n 50 app.log
            exit 1
          fi
          echo "blog_backend deployed. Logs at $(pwd)/app.log"
